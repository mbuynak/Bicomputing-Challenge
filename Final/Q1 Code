#Meeting with YY to work out ANOVA issues

#Question 1
#Import Packages
import pandas
import numpy
from scipy.optimize import minimize
from scipy.stats import norm
import scipy.integrate as spi
from scipy.integrate import odeint
from scipy import stats
import matplotlib.pyplot as plt
import re
import os
from plotnine import *

# Directory
os.chdir("/Users/madelinebuynak/Desktop")

# load data
data=pandas.read_csv("antibiotics.csv",header=0,index_col=0)

# Custom likelihood function
def nllike(p,obs):
    B0=p[0]
    B1=p[1]
    sigma=p[2]
    
    expected=B0+B1*obs.x
    nll=-1*norm(expected,sigma).logpdf(obs.y).sum()
    return nll
# estimate parameters by minimizing the negative log likelihood
initialGuess=numpy.array([1,1,1])
fit=minimize(nllike,initialGuess,method="Nelder-Mead",options={'disp': True},args=df)

# Optimize
print(fit.x)

#Alternative
def alter(p,obs1,obs2):
    B0=p[0]
    B1=p[1]
    sigma=p[2]
    expected=B0+B1*obs1
    nll=-1*norm(expected,sigma).logpdf(obs2).sum()
    return nll  
    
#Create a boxplot
data.boxplot('growth', by='trt', figsize=(12, 8))

ctrl = data['growth'][data.trt == 'ctrl']

grps = pd.unique(data.trt.values)
d_data = {grp:data['weight'][data.trt == grp] 
    for grp in pd.unique(data.trt.values)}

k = len(pd.unique(data.trt))  # number of conditions
N = len(data.values)  # conditions times participants
n = data.groupby('trt').size()[0] #Participants in each condition

#ANOVA
#2-level ANOVA
def nllike_anova_2(p,obs):
    B0=p[0]
    B1=p[1]
    sigma=p[2]
    expected=B0+B1*obs.x1
    nll=-1*norm(expected,sigma).logpdf(obs.y).sum()
    return nll 
F, p = stats.f_oneway(d_data['ctrl'], d_data['trt1'], d_data['trt2'])
DFbetween = k - 1
DFwithin = N - k
DFtotal = N - 1

SSbetween = (sum(data.groupby('trt').sum()['growth']**2)/n) - (data['growth'].sum()**2)/N
sum_y_squared = sum([value**2 for value in data['growth'].values])

SSwithin = sum_y_squared - sum(data.groupby('trt').sum()['growth']**2)/n
SStotal = sum_y_squared - (data['growth'].sum()**2)/N

MSbetween = SSbetween/DFbetween
MSwithin = SSwithin/DFwithin

F = MSbetween/MSwithin
p = stats.f.sf(F, DFbetween, DFwithin)
eta_sqrd = SSbetween/SStotal
om_sqrd = (SSbetween - (DFbetween * MSwithin))/(SStotal + MSwithin)
